{"version":3,"sources":["BooksAPI.js","components/Book.js","Search.js","components/Shelf.js","ListBooks.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","Book","this","props","updateShelf","react_default","a","createElement","className","style","width","height","backgroundImage","imageLinks","thumbnail","value","onChange","e","target","disabled","title","authors","React","Component","Search","state","results","updateQuery","_this","setState","handleSearch","undefined","BooksAPI","trim","response","error","forEach","b","match","filter","B","_this2","_this3","Link","to","type","placeholder","map","components_Book","key","Shelf","name","ListBooks","components_Shelf","BooksApp","Route","path","render","src_Search","exact","src_ListBooks","ReactDOM","BrowserRouter","basename","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.a13ce296.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from 'react'\n\nclass Book extends React.Component {\n\n     render() {\n\n          const book = this.props.book;\n          const updateShelf = this.props.updateShelf;\n\n          return (\n\n               <li>\n                 <div className=\"book\">\n                   <div className=\"book-top\">\n                     <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(\"${(book.imageLinks && book.imageLinks.thumbnail) || ''}\")` }}></div>\n                     <div className=\"book-shelf-changer\">\n                       <select value={book.shelf || 'none'} onChange={(e) => {\n                         updateShelf(book, e.target.value);\n                       }}>\n                         <option value=\"move\" disabled>Move to...</option>\n                         <option value=\"currentlyReading\">Currently Reading</option>\n                         <option value=\"wantToRead\">Want to Read</option>\n                         <option value=\"read\">Read</option>\n                         <option value=\"none\">None</option>\n                       </select>\n                     </div>\n                   </div>\n                   <div className=\"book-title\">{book.title}</div>\n                   <div className=\"book-authors\">{(book.authors && book.authors[0]) || 'No author listed'}</div>\n                 </div>\n               </li>\n          )\n     }\n}\n\nexport default Book","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport * as BooksAPI from './BooksAPI'\nimport Book from './components/Book'\n\nclass Search extends React.Component {\n\n  state = {\n      books: [],\n      results: [],\n      query: ''\n    }\n\n  componentDidMount() {\n    BooksAPI.getAll().then((books) => {\n      this.setState({\n        books: books\n      })\n    })\n  }\n\n  updateQuery = (query) => {\n    this.setState(\n      {query: query},\n      this.handleSearch\n    )\n  }\n\n  handleSearch = () => {\n    const query = this.state.query;\n\n    if (query === '' || query === undefined) {\n      return this.setState({\n        results: []\n      })\n    }\n\n    BooksAPI.search(query.trim())\n    .then((response) => {\n      if (response.error) {\n        return this.setState({\n          results: []\n        })\n      } else {\n        response.forEach(b => {\n          let match = this.state.books.filter(B => B.id === b.id);\n          b.shelf = match[0] ? match[0].shelf : 'none';\n        });\n        return this.setState({\n          results: response\n        })\n      }\n    })\n  }\n\n  render() {\n\n    const updateShelf = this.props.updateShelf;\n\n    return (\n        <div className=\"search-books\">\n            <div className=\"search-books-bar\">\n              <Link\n                to=\"/\"\n                className=\"close-search\">\n                Close\n              </Link>\n              <div className=\"search-books-input-wrapper\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Search by title or author\"\n                  value={this.state.query}\n                  onChange={(e) => this.updateQuery(e.target.value)}\n                />\n              </div>\n            </div>\n            <div className=\"search-books-results\">\n              <ol className=\"books-grid\">\n                {\n                  this.state.results.map((book) => {\n                    return (\n                      <Book\n                        key={book.id}\n                        book={book}\n                        updateShelf={updateShelf}\n                      />\n                    )\n                  })\n                }\n              </ol>\n            </div>\n          </div>\n      )\n\n  }\n\n}\n\nexport default Search\n\n","import React from 'react'\nimport Book from './Book'\n\nclass Shelf extends React.Component {\n\n     render() {\n\n          const books = this.props.books;\n          const name = this.props.name;\n          const updateShelf = this.props.updateShelf;\n\n          return (\n               <div className=\"bookshelf\">\n                    <h2 className=\"bookshelf-title\">{name}</h2>\n                    <div className=\"bookshelf-books\">\n                         <ol className=\"books-grid\">\n                              {\n                                   books.map((book) => {\n                                        return (\n                                             <Book\n                                                  book={book}\n                                                  key={book.id}\n                                                  updateShelf={updateShelf}\n                                             />\n                                        )\n                                   })\n                              }\n                         </ol>\n                    </div>\n              </div>\n          )\n     }\n}\n\nexport default Shelf","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport Shelf from './components/Shelf'\n\nclass ListBooks extends React.Component {\n\n\n     render () {\n\n      const books = this.props.books;\n      const updateShelf = this.props.updateShelf;\n\n          return (\n               <div className=\"list-books\">\n               <div className=\"list-books-title\">\n                 <h1>MyReads</h1>\n               </div>\n               <div className=\"list-books-content\">\n                 <div>\n                    <Shelf\n                      name=\"Currently Reading\"\n                      books={books.filter((book) => {\n                        return book.shelf === 'currentlyReading';\n                        })}\n                      updateShelf={updateShelf}\n                    />\n                    <Shelf\n                      name=\"Want to Read\"\n                      books={books.filter((book) => {\n                        return book.shelf === 'wantToRead';\n                      })}\n                      updateShelf={updateShelf}\n                    />\n                    <Shelf\n                      name=\"Read\"\n                      books={books.filter((book) => {\n                        return book.shelf === 'read';\n                      })}\n                      updateShelf={updateShelf}\n                    />\n                 </div>\n               </div>\n               <div className=\"open-search\">\n                 <Link\n                   to=\"/search\">\n                 </Link>\n               </div>\n             </div>\n          )\n     }\n}\n\nexport default ListBooks","import React from 'react'\nimport {Route} from 'react-router-dom'\nimport Search from './Search'\nimport ListBooks from './ListBooks'\nimport * as BooksAPI from './BooksAPI'\nimport './App.css'\n\nclass BooksApp extends React.Component {\n\n  state = {\n    books: []\n  }\n\n  componentDidMount() {\n    BooksAPI.getAll().then((books) => {\n      this.setState({\n        books: books\n      })\n    })\n  }\n\n  updateShelf = (book, shelf) => {\n    BooksAPI.update(book, shelf)\n    .then((response) => {\n      book.shelf = shelf;\n      this.setState((state) => ({\n        books: state.books.filter((b) => {\n          return (b.id !== book.id)\n        }).concat([book])\n      }))\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Route path=\"/search\" render={() => (\n          <Search\n            books={this.state.books}\n            updateShelf={this.updateShelf}\n          />\n          )}\n        />\n        <Route exact path=\"/\" render={() => (\n          <ListBooks\n            books={this.state.books}\n            updateShelf={this.updateShelf}\n          />\n          )}\n        />\n      </div>\n    )\n  }\n}\n\nexport default BooksApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {BrowserRouter} from 'react-router-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n     <BrowserRouter basename=\"/projects/myReads\"><App /></BrowserRouter>,\n     document.getElementById('root')\n     )\n"],"sourceRoot":""}