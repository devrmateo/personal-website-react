{"version":3,"sources":["components/locations.js","components/mapDisplay.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["LocationsList","props","filtered","react_default","a","createElement","className","index_es","icon","faBars","onClick","toggleDrawer","type","value","query","placeholder","onChange","e","filterLocations","target","map","location","key","id","onListItemClick","name","Map","role","aria-label","closeDrawer","document","querySelector","classList","toggle","drawer","contains","remove","App","state","lat","lng","componentDidMount","googleMapsPromise","Promise","resolve","reject","window","resolveGoogleMapsPromise","google","script","src","concat","async","defer","body","appendChild","placesPromise","_this","fetch","then","response","json","all","values","places","groups","items","venues","forEach","place","venue","push","markers","infowindow","maps","InfoWindow","getElementById","zoom","center","marker","Marker","position","title","animation","Animation","DROP","addListener","populateInfoWindow","setState","catch","error","alert","filter","toLowerCase","includes","setMap","setContent","formattedAddress","setAnimation","close","open","BOUNCE","setTimeout","components_locations","this","components_mapDisplay","Component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","src_App_0","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c0b38bae.chunk.js","sourcesContent":["import React from 'react';\nimport './locations.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\n\nconst LocationsList = (props) => {\n\n     const {filtered} = props;\n\n     return (\n          <div className=\"locations\">\n               <FontAwesomeIcon\n                    icon={faBars}\n                    className=\"fa\"\n                    onClick={props.toggleDrawer}\n               />\n               <div className=\"drawer\">\n                    <input\n                         type=\"text\"\n                         value={props.query}\n                         placeholder=\"Filter Locations\"\n                         onChange={(e) => props.filterLocations(e.target.value)}\n                    />\n                    <p className=\"fourSquare\"><em>Locations provided by FourSquare</em></p>\n                    <nav>\n                         <ul className=\"locationsList\">\n                              {filtered && filtered.map((location) =>\n                                   {return   <li\n                                                  key={location.id}\n                                                  className=\"listItem\">\n                                                  <button\n                                                       onClick={() => props.onListItemClick(location.id)}\n                                                  >\n                                                       {location.name}\n                                                  </button>\n                                             </li>\n                                   })}\n                         </ul>\n                    </nav>\n               </div>\n          </div>\n     );\n}\n\nexport default LocationsList;","import React from 'react';\nimport './mapDisplay.css';\n\nconst Map = (props) => {\n\n     return (\n               <div\n                    id=\"map\"\n                    role=\"application\"\n                    aria-label=\"map\"\n                    onClick={props.closeDrawer}\n               >\n               </div>\n\n\n     )\n}\n\nexport default Map;\n","export function getGoogleMaps() {\n  return new Promise((resolve, reject) => {\n    window.resolveGoogleMapsPromise = () => {\n      resolve(window.google);\n      delete window.resolveGoogleMapsPromise;\n    };\n    const script = document.createElement('script');\n    const API = 'AIzaSyBYxtGxA3B4KgCSBExLmK_lD_lq5u-xkMA';\n    script.src = `https://maps.googleapis.com/maps/api/js?key=${API}&callback=resolveGoogleMapsPromise`;\n    script.async = true;\n    script.defer = true;\n    document.body.appendChild(script);\n  });\n}\n\nexport function getPlaces(lat, lng) {\n     return fetch(`https://api.foursquare.com/v2/venues/explore?client_id=JEASTQIYAOQHC5EJ45NM4QUSD2AS11EADPF51VDM42O4Q13A&client_secret=GEMFOAQ5IBMRS1ROLEFMRMNEZSV0R3QYPZEMLALQJNUFANCH&v=20180323&limit=15&ll=${lat},${lng}`)\n    .then((response) => {\n      return response.json();\n    })\n}\n\nexport function toggleDrawer() {\n        const drawer = document.querySelector('.drawer');\n        drawer.classList.toggle('open');\n  }\n\nexport function closeDrawer() {\n      const drawer = document.querySelector('.drawer');\n      if (drawer.classList.contains('open')) {\n         drawer.classList.remove('open');\n      }\n   }\n","import React, { Component } from 'react';\nimport LocationsList from './components/locations';\nimport Map from './components/mapDisplay';\nimport './App.css';\nimport {getGoogleMaps, getPlaces, toggleDrawer, closeDrawer} from './utils';\n\nclass App extends Component {\n\n  state = {\n    query: '',\n    filtered: [],\n    lat: 34.15334,\n    lng: -118.761676,\n  }\n\n  componentDidMount = () => {\n    let googleMapsPromise = getGoogleMaps();\n    let placesPromise = getPlaces(this.state.lat, this.state.lng);\n\n    Promise.all([\n      googleMapsPromise,\n      placesPromise\n      ])\n      .then((values) => {\n        let google = values[0];\n        let places = values[1].response.groups[0].items;\n        let venues = [];\n        places.forEach((place) => {\n          const venue = place.venue;\n          venues.push(venue);\n        })\n        this.venues = venues;\n        this.google = google;\n        this.markers = [];\n        this.infowindow = new google.maps.InfoWindow();\n        this.map = new google.maps.Map(document.getElementById('map'), {\n          zoom: 13,\n          center: {\n            lat: this.state.lat,\n            lng: this.state.lng\n          }\n        });\n        venues.forEach((venue) => {\n          const marker = new google.maps.Marker({\n            map: this.map,\n            position: {lat: venue.location.lat, lng: venue.location.lng},\n            title: venue.name,\n            animation: window.google.maps.Animation.DROP,\n            id: venue.id,\n        });\n      // Push the marker to our array of markers.\n        this.markers.push(marker);\n        marker.addListener('click', () => {\n          this.populateInfoWindow(marker, this.infowindow);\n        });\n        });\n        this.setState({\n          filtered: venues,\n        })\n      })\n      .catch((error) => alert('There was an error loading the data.'));\n  }\n\n  filterLocations = (query) => {\n    let filtered;\n    if (query) {\n      filtered = this.venues.filter((location) => location.name.toLowerCase().includes(query.toLowerCase()));\n    } else {\n      filtered = this.venues;\n    }\n\n    this.markers.forEach((marker) => {\n      if (marker.title.toLowerCase().includes(query.toLowerCase())) {\n        marker.setMap(this.map);\n      } else {\n        marker.setMap(null);\n      }\n    });\n\n    this.setState({\n      filtered,\n      query\n    });\n  }\n\n\n  populateInfoWindow = (marker, infowindow) => {\n\n    // Check to make sure the infowindow is not already opened on this marker.\n    if (infowindow.marker !== marker) {\n      // Clear the infowindow content to give the streetview time to load.\n      const location = this.state.filtered.filter((location) => location.id === marker.id)[0];\n\n      infowindow.setContent(`\n                              <h3>${location.name}</h3>\n                              <div>${location.location.formattedAddress[0]}</div>\n                              <div>${location.location.formattedAddress[1]}</div>\n                              <div>${location.location.formattedAddress[2]}</div>\n                              <p><em>Locations provided by FourSquare</em></p>\n                            `);\n      infowindow.marker = marker;\n\n      // Make sure the marker property is cleared if the infowindow is closed.\n      infowindow.addListener('closeclick', () => {\n        infowindow.marker = null;\n        marker.setAnimation(-1);\n      });\n\n      this.map.addListener('click', () => {\n        infowindow.close();\n        infowindow.marker = null;\n        marker.setAnimation(-1);\n      })\n\n      // Open the infowindow on the correct marker.\n      infowindow.open(this.map, marker);\n    }\n  }\n\n  onListItemClick = (id) => {\n    let markers = this.markers;\n    let filtered = markers.filter((marker) => marker.id === id)[0];\n\n    this.populateInfoWindow(filtered, this.infowindow);\n    filtered.setAnimation(window.google.maps.Animation.BOUNCE);\n    setTimeout(() => {filtered.setAnimation(-1)}, 725);\n    closeDrawer();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">Around the Neighborhood</h1>\n        <h4 className=\"subtitle\">Things to do in Agoura Hills, California</h4>\n        <LocationsList\n          query={this.state.query}\n          filtered={this.state.filtered}\n          filterLocations={this.filterLocations}\n          onListItemClick={this.onListItemClick}\n          toggleDrawer={toggleDrawer}\n        />\n        <Map\n          closeDrawer={closeDrawer}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}